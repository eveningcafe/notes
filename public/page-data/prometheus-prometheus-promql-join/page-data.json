{"componentChunkName":"component---node-modules-gatsby-theme-andy-src-templates-note-js","path":"/prometheus-prometheus-promql-join","result":{"data":{"brainNote":{"slug":"prometheus-prometheus-promql-join","title":"prometheus-prometheus-promql-join","childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"prometheus-prometheus-promql-join\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Join in PromQL\"), mdx(\"p\", null, \"Sources:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://www.robustperception.io/left-joins-in-promql\"\n  }, \"https://www.robustperception.io/left-joins-in-promql\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://www.robustperception.io/using-group_left-to-calculate-label-proportions\"\n  }, \"https://www.robustperception.io/using-group_left-to-calculate-label-proportions\"))), mdx(\"p\", null, \"PromQL doesn't have a feature called \\\"joins\\\", however does have \\\"vector matching\\\" which is a similar idea.\"), mdx(\"h2\", null, \"Example\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Many-to-one matching\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"a * on (foo, bar) group_left(baz) b\\n|\\n|\\n|\\nv\\nSELECT a.value * b.value, a.*, b.baz\\nFROM a JOIN b ON (a.foo = b.foo AND a.bar == b.bar)\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"A left join, but won't catch where the right hand side doesn't have a value to go with the left.\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"a * on (foo, bar) group_left(baz) b\\nor on (foo, bar) a\\n|\\n|\\n|\\nv\\nSELECT a.value * COALESCE(b.value, 1), a.*, b.baz\\nFROM a LEFT OUTER JOIN b ON (a.foo == b.foo AND a.bar == b.bar)\\n\")), mdx(\"h2\", null, \"Use case: Using group_left to add hostname label to a query result\"), mdx(\"p\", null, \"Sometimes, the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"instance\"), \" in Prometheus metric doesn't make any sense and we need something else to provide more information. A hostname for example, and our answer exist inside the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"node_uname_info\"), \". We just need to take the hostname from this metric and add the final value.\"), mdx(\"p\", null, \"The solution is using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"group_left\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"node_memory_Active_bytes * on(instance) group_left(nodename) (node_uname_info)\\n\")), mdx(\"p\", null, \"Prometheus gets the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"nodename\"), \" from \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"node_uname_info\"), \" and add into the final results:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"{instance=\\\"localhost:9100\\\",job=\\\"node-exporter\\\",nodename=\\\"your-first-vm\\\"}    36917006336\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"},"inboundReferenceNotes":[{"title":"About these notes","slug":"about","childMdx":{"excerpt":"Hi, I'm  Kien Nguyen-Tuan  ðŸ‘‹. prometheus-promql-gotchas prometheus-prometheus-promql-join prometheus-prometheus-labels-relabel prometheusâ€¦"}}],"outboundReferenceNotes":[]},"site":{"siteMetadata":{"title":"@kiennt's notes"}}},"pageContext":{"slug":"prometheus-prometheus-promql-join"}},"staticQueryHashes":[]}