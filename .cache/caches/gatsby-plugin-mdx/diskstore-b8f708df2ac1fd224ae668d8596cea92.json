{"expireTime":9007200904134063000,"key":"gatsby-plugin-mdx-entire-payload-d4fce8e1971557a75934e9274e6160f5-/notes","val":{"mdast":{"type":"root","children":[{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Vim already has built-in key commands for insert mode to shift the current line left or right one ","position":{"start":{"line":2,"column":3,"offset":3},"end":{"line":2,"column":101,"offset":101},"indent":[]}},{"type":"inlineCode","value":"&shiftwidth","position":{"start":{"line":2,"column":101,"offset":101},"end":{"line":2,"column":114,"offset":114},"indent":[]}},{"type":"text","value":". They are (in insert mode):","position":{"start":{"line":2,"column":114,"offset":114},"end":{"line":2,"column":142,"offset":142},"indent":[]}}],"position":{"start":{"line":2,"column":3,"offset":3},"end":{"line":2,"column":142,"offset":142},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":142,"offset":142},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"Ctrl-t","position":{"start":{"line":3,"column":4,"offset":146},"end":{"line":3,"column":12,"offset":154},"indent":[]}},{"type":"text","value":" : shift right (mnemonic \"tab\")","position":{"start":{"line":3,"column":12,"offset":154},"end":{"line":3,"column":43,"offset":185},"indent":[]}}],"position":{"start":{"line":3,"column":4,"offset":146},"end":{"line":3,"column":43,"offset":185},"indent":[]}}],"position":{"start":{"line":3,"column":1,"offset":143},"end":{"line":3,"column":43,"offset":185},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"Ctrl-d","position":{"start":{"line":4,"column":4,"offset":189},"end":{"line":4,"column":12,"offset":197},"indent":[]}},{"type":"text","value":" : shift left (mnemonic \"de-tab\")","position":{"start":{"line":4,"column":12,"offset":197},"end":{"line":4,"column":45,"offset":230},"indent":[]}}],"position":{"start":{"line":4,"column":4,"offset":189},"end":{"line":4,"column":45,"offset":230},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":186},"end":{"line":4,"column":45,"offset":230},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":4,"column":45,"offset":230},"indent":[1,1]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"Vim notes\"}","position":{"start":{"line":7,"column":1,"offset":233},"end":{"line":7,"column":50,"offset":282},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":7,"column":50,"offset":282}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Vim notes\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Vim already has built-in key commands for insert mode to shift the current line left or right one \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"&shiftwidth\"), \". They are (in insert mode):\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Ctrl-t\"), \" : shift right (mnemonic \\\"tab\\\")\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Ctrl-d\"), \" : shift left (mnemonic \\\"de-tab\\\")\")));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"Vim notes\"\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <ul>\n      <li parentName=\"ul\">{`Vim already has built-in key commands for insert mode to shift the current line left or right one `}<inlineCode parentName=\"li\">{`&shiftwidth`}</inlineCode>{`. They are (in insert mode):`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`Ctrl-t`}</inlineCode>{` : shift right (mnemonic \"tab\")`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`Ctrl-d`}</inlineCode>{` : shift left (mnemonic \"de-tab\")`}</li>\n    </ul>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}