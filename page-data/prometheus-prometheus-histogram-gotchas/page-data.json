{"componentChunkName":"component---node-modules-gatsby-theme-andy-src-templates-note-js","path":"/prometheus-prometheus-histogram-gotchas","result":{"data":{"brainNote":{"slug":"prometheus-prometheus-histogram-gotchas","title":"prometheus-prometheus-histogram-gotchas","childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"prometheus-prometheus-histogram-gotchas\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Prometheus Histogram\"), mdx(\"p\", null, \"Source: \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.robustperception.io/how-does-a-prometheus-histogram-work\"\n  }, \"https://www.robustperception.io/how-does-a-prometheus-histogram-work\")), mdx(\"h2\", null, \"First look\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The histogram is a combination of various counters.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Histogram ~ Summary: used to track the size of events, same utilities.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Histogram != Summary: their handling of quantiles.\")), mdx(\"h2\", null, \"Gotchas through example\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"# HELP prometheus_http_request_duration_seconds Histogram of latencies for HTTP requests.\\n# TYPE prometheus_http_request_duration_seconds histogram\\nprometheus_http_request_duration_seconds_bucket{handler=\\\"/\\\",le=\\\"0.1\\\"} 25547\\nprometheus_http_request_duration_seconds_bucket{handler=\\\"/\\\",le=\\\"0.2\\\"} 26688\\nprometheus_http_request_duration_seconds_bucket{handler=\\\"/\\\",le=\\\"0.4\\\"} 27760\\nprometheus_http_request_duration_seconds_bucket{handler=\\\"/\\\",le=\\\"1\\\"} 28641\\nprometheus_http_request_duration_seconds_bucket{handler=\\\"/\\\",le=\\\"3\\\"} 28782\\nprometheus_http_request_duration_seconds_bucket{handler=\\\"/\\\",le=\\\"8\\\"} 28844\\nprometheus_http_request_duration_seconds_bucket{handler=\\\"/\\\",le=\\\"20\\\"} 28855\\nprometheus_http_request_duration_seconds_bucket{handler=\\\"/\\\",le=\\\"60\\\"} 28860\\nprometheus_http_request_duration_seconds_bucket{handler=\\\"/\\\",le=\\\"120\\\"} 28860\\nprometheus_http_request_duration_seconds_bucket{handler=\\\"/\\\",le=\\\"+Inf\\\"} 28860\\nprometheus_http_request_duration_seconds_sum{handler=\\\"/\\\"} 1863.80491025699\\nprometheus_http_request_duration_seconds_count{handler=\\\"/\\\"} 28860\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"_bucket\"), \" time series: counters which form a cumulative histogram, \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"le\"), \" stands for \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"less than or equal to\"), \". 26688 requests took less than or equal to 200ms.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"+Inf\"), \" bucket must always be present and will match the value of the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"_count\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Calculate the X quantile (the X \", \"*\", \" 100th percentile):\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"histogram_quantile(X,\\n  rate(prometheus_http_request_duration_seconds_bucket[5m])\\n)\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Aggregate the buckets before calculating the quantile.\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"histogram_quantile(0.9,\\n  sum without (handler)(\\n    rate(prometheus_http_request_duration_seconds_bucket[5m])\\n  )\\n)\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Why not always use histograms?\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"With histograms you have to pre-choose your buckets.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The cost moves from the client to Prometheus itself due to bucket cardinality. Cardinality is always something to consider with labels, and a histogram by default will have a cardinality of 10 for its buckets. If additional labels are added to the histogram, or more buckets are added, then histograms can get rather expensive.\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"You can drop some buckets at ingestion time -> reduce the cost to Prometheus. Not that, you can drop as many as few buckets as you like, however the +Inf bucket is required for \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"histogram_quantile\"), \". For example:\"))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"scrape_configs:\\n - job_name: 'my_job'\\n   static_configs:\\n     - targets:\\n       - my_target:1234\\n   metric_relabel_configs:\\n   - source_labels: [ __name__, le ]\\n     regex: 'example_latency_seconds_bucket;(0\\\\.0.*)'\\n     action: drop\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The potential high cardinality of histograms is also one reason a histogram has a \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"_sum\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"_count\"), \". Even if you drop all the bucket time series, you can still calculate an average latency with just those two time series.\")));\n}\n;\nMDXContent.isMDXComponent = true;"},"inboundReferenceNotes":[{"title":"About these notes","slug":"about","childMdx":{"excerpt":"Hi, I'm  Kien Nguyen-Tuan  ðŸ‘‹. prometheus-promql-gotchas prometheus-prometheus-promql-join prometheus-prometheus-labels-relabel prometheusâ€¦"}}],"outboundReferenceNotes":[]},"site":{"siteMetadata":{"title":"@kiennt's notes"}}},"pageContext":{"slug":"prometheus-prometheus-histogram-gotchas"}},"staticQueryHashes":[]}